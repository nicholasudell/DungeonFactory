@page "/Document/{id:guid}/"
@using System.Collections.ObjectModel
@using DungeonFactory.Components;
@using DungeonFactory.Model
@implements IAsyncDisposable
@inject DocumentService DocumentService;

<article class="ui container">

	<PageTitle>Index</PageTitle>

	<Header Type="Header.HeaderType.H1" Editable ValueChanged="HeaderChanged">@document?.Title</Header>

	@if(document is null)
	{
		<div class="ui placeholder">
		  <div class="line"></div>
		  <div class="line"></div>
		  <div class="line"></div>
		  <div class="line"></div>
		  <div class="line"></div>
		</div>	
	}
	else
	{
		@foreach(var block in Blocks)
		{
			switch(block)
			{
				case Model.MarkdownBlock mdb:
					<MarkdownBlock @ref="BlockRef" ContentChanged="@(async ()=> { await Task.Yield(); SaveChanges();})" Block="@mdb"></MarkdownBlock>
					;
					break;
				default: throw new InvalidOperationException($"Unknown block: {block.GetType()}");
			};
		}
	}
</article>

@code
{
	List<Components.MarkdownBlock> blockRefs = new ();

	Components.MarkdownBlock BlockRef
	{
		set => blockRefs.Add(value);
	}

	async Task HeaderChanged(ChangeEventArgs e)
	{
		if(document is null)
		{
			return;
		}

		document.Title = e.Value?.ToString() ?? "New Page";

		SaveChanges();
	}

	[Parameter]
	public Guid? Id { get; set; }

	void LoadDocument(Guid? id)
	{
		if(id is null)
		{
			document = root = DocumentService.GetDefault();
		}
		else
		{
			(document, root) = DocumentService.FindNode(id.Value);
		}

		if(document is null)
		{
			Console.WriteLine($"Can't find the document! ID: {id}");
			return;
		}

		Blocks = document.Blocks;

		StateHasChanged();
	}

	public ICollection<Model.Block> Blocks { get; set; } = new Collection<Model.Block>();

	void SaveChanges()
	{
		if(root is null)
		{
			return;
		}

		DocumentService.Update(root);
	}

	Document? document;
	Document? root;

	protected override void OnParametersSet()
	{
		LoadDocument(Id);
	}

	public async ValueTask DisposeAsync()
	{
		Console.WriteLine("Page dispose called");

		//foreach(var blockRef in blockRefs)
		//{
		//	await blockRef.DisposeAsync();
		//}
	}
}
