@using DungeonFactory.Model
@inject NavigationManager NavigationManager;
@inject DocumentService DocumentService;

<div class="item">
	<Grid Classes="compact">
		<Row>
			<Column Classes="one wide">
				@if (Node.Children.Any())
				{
					<i @onclick="()=>Toggle()" class="@ToggleIcon icon"></i>
				}
			</Column>
			<Column Classes="one wide">
				<i @onclick="()=>NewDocument()" class="plus icon"></i>
			</Column>
			<Column Classes="one wide">
				<i @onclick="()=>NewMap()" class="world icon"></i>
			</Column>
			<Column Classes="eleven wide">
				<a @onclick="()=>Click()" class="content">
					@Node.Document.Title
				</a>
			</Column>
		</Row>
	</Grid>
	
	@if(Node.Expanded && Node.Any())
	{
		<div class="list">
			@foreach(var child in Node)
			{
				<TreeViewNode Node="@child"></TreeViewNode>
			}
		</div>
	}
</div>

@code {

	[Parameter, EditorRequired]
	public Node Node { get; set; } = default!;

	string ToggleIcon => Node.Expanded ? "angle down" : "angle right";

	void Click()
	{
		var pathSlug = Node.Document switch
		{
			Map => "Map",
			_ => "Document"
		};

		NavigationManager.NavigateTo($"{pathSlug}/{Node.Document.Id}");
	}

	void Toggle()
	{
		Node.Expanded = !Node.Expanded;
	}

	void NewDocument()
	{
		var document = Document.CreateDocument();

		(var parentRecord, var root) = DocumentService.FindNode(Node.Document.Id);
		
		parentRecord!.Children.Add(document);
		
		DocumentService.Update(root!);

		var id = document.Id;

        NavigationManager.NavigateTo($"Document/{id}");
	}

	void NewMap()
	{
		var document = Map.CreateMap();

		(var parentRecord, var root) = DocumentService.FindNode(Node.Document.Id);
		
		parentRecord!.Children.Add(document);
		
		DocumentService.Update(root!);

		var id = document.Id;

        NavigationManager.NavigateTo($"Map/{id}");
	}
}